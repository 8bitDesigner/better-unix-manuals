#!/usr/bin/env node
require('dotenv').load();

var fs = require('fs')
  , path = require('path')
  , url = require('url')
  , request = require('request')
  , pkg = require(path.join(process.cwd(), 'package.json'))

function handle(err) {
  if (!err) { return }
  console.error(JSON.stringify(err, null, 2))
  process.exit(1)
}

function userPath() {
  var repo = pkg.repository.url
    , parsed = url.parse(pkg.repository.url).pathname
  return parsed.replace(/^\//, '').replace('.git', '')
}

function ghReq(options, cb) {
  options.headers = options.headers || {}
  options.headers["User-Agent"] = pkg.name + ' release script'
  options.headers["Authorization"] = "token "+process.env.GHTOKEN

  request(options, function(err, body, json) {
    if (err)               { cb(err, null)  }
    else if (json.message) { cb(json, null) }
    else                   { cb(null, json) }
  })
}

function createRelease(tagName, cb) {
  ghReq({
    method: "POST",
    json: true,
    url: "https://api.github.com/repos/"+userPath()+"/releases",
    body: {
      tag_name: tagName,
      name: tagName,
      body: tagName
    }
  }, cb)
}

function appendFile(release, file, cb) {
  console.log('Uploading: '+path.join(process.cwd(), file))
  ghReq({
    method: "POST",
    url: release.upload_url.replace('{?name}', ''),
    body: fs.readFileSync(path.join(process.cwd(), file)),
    headers: { "Content-Type": "application/zip" },
    qs: { name: release.tag_name +'-'+ pkg.name + path.extname(file)}
  }, cb)
}

var tagName = process.argv[2]
if (tagName[0] !== 'v') tagName = 'v'+tagName

createRelease(tagName, function(err, release) {
  handle(err)
  appendFile(release, process.argv[3], function(err, response) {
    handle(err)
    console.log("Release "+release.tag_name+" created.")
  })
})
